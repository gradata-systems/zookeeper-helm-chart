apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "zookeeper.fullname" . }}
  labels:
    {{- include "zookeeper.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "zookeeper.fullname" . }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      {{- include "zookeeper.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "zookeeper.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.takeOwnershipOnStartup }}
      initContainers:
        - name: take-ownership
          image: {{ .Values.image.busybox.repository }}
          command:
            - sh
            - -c
            - |
              chown 1000:1000 /data/
              chown 1000:1000 /datalog/
              chown 1000:1000 /logs/
          securityContext:
            runAsUser: 0
            runAsNonRoot: false
          volumeMounts:
            - mountPath: /data
              name: data
              subPath: data
            - mountPath: /datalog
              name: data
              subPath: datalog
            - mountPath: /logs
              name: data
              subPath: logs
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: IfNotPresent
          command: [ "/bin/startup.sh" ]
          env:
            - name: JVMFLAGS
              value: {{ .Values.jvmOpts | quote }}
            - name: KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- toYaml .Values.certificate.keystorePasswordSecretRef | nindent 18 }}
          ports:
            {{- range $name, $value := .Values.ports }}
            - name: {{ $name }}
              containerPort: {{ $value }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - mountPath: /conf/zoo-base.cfg
              name: config
              subPath: zoo.cfg
              readOnly: true
            - mountPath: /bin/startup.sh
              name: config
              subPath: startup.sh
              readOnly: true
            - mountPath: /bin/healthcheck.sh
              name: config
              subPath: healthcheck.sh
              readOnly: true
            - mountPath: /opt/certmanager
              name: certs
              readOnly: true
            - mountPath: /opt/tls
              name: tls
            - mountPath: /data
              name: data
              subPath: data
            - mountPath: /datalog
              name: data
              subPath: datalog
            - mountPath: /logs
              name: data
              subPath: logs
          startupProbe:
            initialDelaySeconds: 5
            periodSeconds: 3
            timeoutSeconds: 3
            failureThreshold: 10
            exec:
              command: [ "/bin/healthcheck.sh" ]
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            exec:
              command: [ "/bin/healthcheck.sh" ]
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
      {{- with .Values.serviceAccount }}
      serviceAccountName: {{ .name | default (include "zookeeper.fullname" $) }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        {{- if .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- else }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "zookeeper.selectorLabels" . | nindent 20 }}
                topologyKey: kubernetes.io/hostname
              weight: 100
        {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "zookeeper.fullname" . }}
            defaultMode: 0500
        - name: certs
          csi:
            driver: csi.cert-manager.io
            volumeAttributes:
              {{- with .Values.certificate }}
              {{- $hostName := printf "${POD_NAME}.%s.%s" (include "zookeeper.fullname" $ ) $.Release.Namespace }}
              csi.cert-manager.io/issuer-name: {{ .issuerRef.name | quote }}
              csi.cert-manager.io/issuer-kind: {{ .issuerRef.kind | quote }}
              csi.cert-manager.io/common-name: ${POD_NAME}.{{ include "zookeeper.fullname" $ }}
              csi.cert-manager.io/dns-names: {{ $hostName }},{{ $hostName }}.svc.cluster.local
              csi.cert-manager.io/duration: {{ .duration }}
              csi.cert-manager.io/key-usages: server auth,client auth
              csi.cert-manager.io/renew-before: {{ .renewBefore | quote }}
              csi.cert-manager.io/fs-group: "1000"
              {{- end }}
            readOnly: true
        - name: tls
          emptyDir: { }
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          {{- include "zookeeper.labels" . | nindent 10 }}
      spec:
        volumeName: {{ .Values.volumeClaim.volumeName | quote }}
        storageClassName: {{ .Values.volumeClaim.storageClassName | quote }}
        selector:
          {{- with .Values.volumeClaim.selector.matchLabels }}
          matchLabels:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.volumeClaim.selector.matchExpressions }}
          matchExpressions:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.volumeClaim.dataSource }}
        dataSource:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.volumeClaim.accessModes }}
        accessModes:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.volumeClaim.volumeMode }}
        volumeMode:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.volumeClaim.resources.requests.storage }}
          limits:
            storage: {{ .Values.volumeClaim.resources.limits.storage }}
